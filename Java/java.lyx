#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{fancyhdr}% http://ctan.org/pkg/fancyhdr
\fancyhead{}% Clear all headers
%\fancyfoot{}% Clear all footers
\renewcommand{\headrulewidth}{0pt}% Remove header rule
%\renewcommand{\footrulewidth}{0pt}% Remove footer rule
\pagestyle{fancy}% Set page style to "fancy"
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\ttfamily},columns=fullflexible,keywordstyle={\color{blue}}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Object Oriented Programming Using Java
\end_layout

\begin_layout Chapter
Introduction to OOP
\end_layout

\begin_layout Section
Objects and Classes
\end_layout

\begin_layout Section
Characteristics of OOP
\end_layout

\begin_layout Section
Difference between OOP and Procedure Oriented Programming
\end_layout

\begin_layout Section
Introduction to Java Programming
\end_layout

\begin_layout Section
Features of Java
\end_layout

\begin_layout Section
Applications and Applets
\end_layout

\begin_layout Section
JDK
\end_layout

\begin_layout Section
Source File Structure
\end_layout

\begin_layout Chapter
Java Language Fundamentals
\end_layout

\begin_layout Section
Building Blocks of Java
\end_layout

\begin_layout Section
Data Types
\end_layout

\begin_layout Section
Variable Declarations
\end_layout

\begin_layout Section
Wrapper Classes
\end_layout

\begin_layout Section
Operators and Assignment
\end_layout

\begin_layout Section
Control Structures
\end_layout

\begin_layout Section
Arrays
\end_layout

\begin_layout Section
Strings
\end_layout

\begin_layout Section

\family typewriter
StringBuffer
\family default
 Class
\end_layout

\begin_layout Chapter
Java as an OOP Language
\end_layout

\begin_layout Section
Defining Classes
\end_layout

\begin_layout Section
Modifiers
\end_layout

\begin_layout Section
Packages
\end_layout

\begin_layout Section
Interfaces
\end_layout

\begin_layout Section
Exception Handling
\end_layout

\begin_layout Section
Exception Hierarchy
\end_layout

\begin_layout Section
Constructors and Methods of 
\family typewriter
Throwable
\family default
 Class
\end_layout

\begin_layout Section
Unchecked and Checked Exceptions
\end_layout

\begin_layout Section
Handling Exceptions in Java
\end_layout

\begin_layout Section
Exceptions and Inheritance
\end_layout

\begin_layout Section
Throwing User Defined Exceptions
\end_layout

\begin_layout Section
Redirecting and Rethrowing Exceptions
\end_layout

\begin_layout Chapter
Multithreading
\end_layout

\begin_layout Section
Overview of Threading
\end_layout

\begin_layout Subsection*
What is a Thread?
\end_layout

\begin_layout Standard
Java provides built-in support for multithreading.
 Basically, a multithreaded program has two or more segments that can run
 together or concurrently and each such part is independently called a thread.
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

Thread is the smallest unit of code that can be dispatched by the scheduler
 in a program, in a multitasking environment
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection*
Types of Multitasking
\end_layout

\begin_layout Itemize
Process based multitasking allows the PC to run simultaneously mutiple processes
 or, individual programs.
\end_layout

\begin_layout Itemize
Thread based multitasking allows a program to run concurrently two or more
 segments or threads in it, each of which execute differently.
\end_layout

\begin_layout Subsection*
Benefits
\end_layout

\begin_layout Standard
Due to multithreading, we can write efficient programs that make complete
 use of the processor power available.
\end_layout

\begin_layout Section
Creating Threads
\end_layout

\begin_layout Standard
There are two ways to create a thread - 
\end_layout

\begin_layout Itemize
implement the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Runnable
\end_layout

\end_inset

 interface
\end_layout

\begin_layout Itemize
extend the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Thread
\end_layout

\end_inset

 class
\end_layout

\begin_layout Subsection*
Thread Creation by implementing 
\family typewriter
Runnable 
\family default
interface
\end_layout

\begin_layout Standard
Just implement the function
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

public void run();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

run()
\end_layout

\end_inset

 returns, the thread stops.
 Basically first we need to create a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Thread
\end_layout

\end_inset


\family typewriter
 
\family default
object (say 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

myThread
\end_layout

\end_inset

) inside the class and in the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

run()
\end_layout

\end_inset

 function, we just call the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

start()
\end_layout

\end_inset

 method of that thread.
 A simple way to create thread is
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

new Thread(Runnable threadObj, String threadName);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An example is
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class ThreadClass implements Runnable {
\end_layout

\begin_layout Plain Layout

	Thread t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ThreadClass() {
\end_layout

\begin_layout Plain Layout

		t = new Thread(this, "Example Thread");
\end_layout

\begin_layout Plain Layout

		t.start();
\end_layout

\begin_layout Plain Layout

		// starts the thread by calling run()
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void run() {
\end_layout

\begin_layout Plain Layout

		// might throw an InterruptedException
\end_layout

\begin_layout Plain Layout

		try {
\end_layout

\begin_layout Plain Layout

			for (int i = 5; i > 0; ++i) {
\end_layout

\begin_layout Plain Layout

				System.out.println("ThreadClass says : "+i);
\end_layout

\begin_layout Plain Layout

				Thread.sleep(500);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

			System.out.println("ThreadClass interrupted.");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		System.out.println("ThreadClass exiting.");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Demo {
\end_layout

\begin_layout Plain Layout

	public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

		ThreadClass tc = new ThreadClass();
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		try {
\end_layout

\begin_layout Plain Layout

			for (int i = 5; i > 0; ++i) {
\end_layout

\begin_layout Plain Layout

				System.out.println("main says : "+i);
\end_layout

\begin_layout Plain Layout

				Thread.sleep(1000);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

			System.out.println("main interrupted.");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		System.out.println("main exiting.");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}		
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When we run 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Demo
\end_layout

\end_inset

 class, then first an instance of 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

ThreadClass
\end_layout

\end_inset

 is created, and then for 
\begin_inset Formula $5$
\end_inset

 times, the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

main
\end_layout

\end_inset

 thread sleeps (done via 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

sleep()
\end_layout

\end_inset

).
 Before sleeping, it outputs a number corresponding to the time the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

main
\end_layout

\end_inset

 thread is run.
 But when it sleeps, the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

ThreadClass
\end_layout

\end_inset

 instance 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

tc
\end_layout

\end_inset

 runs in parallel, and it also pauses, according to its routine.
 So we get a mix of outputs from both 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

main
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

tc
\end_layout

\end_inset

.
 The sleep command's syntax is
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

static void sleep(long milliseconds) throws InterruptedException
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

static void sleep(long milliseconds, int nanoseconds) throws InterruptedExceptio
n
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Thread Creation by extending 
\family typewriter
Thread
\end_layout

\begin_layout Standard
Here we extend the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Thread
\end_layout

\end_inset

 object and override its 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

run()
\end_layout

\end_inset

 function.
 Just like the previous way, it should also call 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

start()
\end_layout

\end_inset

 to begin execution.
 An example is
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class ThreadClass2 extends Thread {
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	ThreadClass2() {
\end_layout

\begin_layout Plain Layout

		super("Example Thread");
\end_layout

\begin_layout Plain Layout

		t.start();
\end_layout

\begin_layout Plain Layout

		// starts the thread by calling run()
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void run() {
\end_layout

\begin_layout Plain Layout

		// might throw an InterruptedException
\end_layout

\begin_layout Plain Layout

		try {
\end_layout

\begin_layout Plain Layout

			for (int i = 5; i > 0; ++i) {
\end_layout

\begin_layout Plain Layout

				System.out.println("ThreadClass says : "+i);
\end_layout

\begin_layout Plain Layout

				Thread.sleep(500);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

			System.out.println("ThreadClass interrupted.");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		System.out.println("ThreadClass exiting.");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Demo2 {
\end_layout

\begin_layout Plain Layout

	public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

		ThreadClass2 tc = new ThreadClass2();
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		try {
\end_layout

\begin_layout Plain Layout

			for (int i = 5; i > 0; ++i) {
\end_layout

\begin_layout Plain Layout

				System.out.println("main says : "+i);
\end_layout

\begin_layout Plain Layout

				Thread.sleep(1000);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

			System.out.println("main interrupted.");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		System.out.println("main exiting.");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}		
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This also pretty much works in the same way as the previous, where we implemente
d 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Runnable
\end_layout

\end_inset

.
 This time we need to compile and run 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Demo2
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Thread Life Cycle
\end_layout

\begin_layout Section
Thread Priorities and Thread Scheduling
\end_layout

\begin_layout Section
Thread Synchronization
\end_layout

\begin_layout Section
Daemon Threads
\end_layout

\begin_layout Section
Thread Groups
\end_layout

\begin_layout Section
Communication of Threads
\end_layout

\begin_layout Chapter
Files and I/O Streams
\end_layout

\begin_layout Section
Java I/O
\end_layout

\begin_layout Section
File Streams
\end_layout

\begin_layout Section

\family typewriter
FileInputStream
\family default
 and 
\family typewriter
FileOutputStream
\end_layout

\begin_layout Section
Filter Streams
\end_layout

\begin_layout Section
Random Access Files
\end_layout

\begin_layout Section
Serialization
\end_layout

\begin_layout Chapter
Applets
\end_layout

\begin_layout Section
Java Applications versus Java Applets
\end_layout

\begin_layout Section
Applet Life Cycle
\end_layout

\begin_layout Section
Working with Applets
\end_layout

\begin_layout Section
The HTML Applet Tag
\end_layout

\begin_layout Section

\family typewriter
java.Applet
\family default
 Package
\end_layout

\begin_layout Chapter
AWT
\end_layout

\begin_layout Section
Basic Classes in AWT
\end_layout

\begin_layout Section
Drawing with 
\family typewriter
Graphics
\family default
 Class
\end_layout

\begin_layout Section
Class Hierarchy of AWT
\end_layout

\begin_layout Section
Event Handling
\end_layout

\begin_layout Section
Adapter Classes
\end_layout

\begin_layout Section
AWT Controls
\end_layout

\begin_layout Section
Layout Managers
\end_layout

\begin_layout Section

\family typewriter
Swing
\end_layout

\begin_layout Section
Packages in 
\family typewriter
Swing
\end_layout

\begin_layout Section
Hierarchy of 
\family typewriter
Swing 
\family default
Classes
\end_layout

\begin_layout Section
Advanced Layout Managers
\end_layout

\begin_layout Section
Additional Swing Components
\end_layout

\end_body
\end_document
