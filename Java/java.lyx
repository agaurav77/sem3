#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{fancyhdr}% http://ctan.org/pkg/fancyhdr
\fancyhead{}% Clear all headers
%\fancyfoot{}% Clear all footers
\renewcommand{\headrulewidth}{0pt}% Remove header rule
%\renewcommand{\footrulewidth}{0pt}% Remove footer rule
\pagestyle{fancy}% Set page style to "fancy"
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\ttfamily},columns=fullflexible,keywordstyle={\color{blue}}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Object Oriented Programming Using Java
\end_layout

\begin_layout Chapter
Introduction to OOP
\end_layout

\begin_layout Section
Objects and Classes
\end_layout

\begin_layout Subsection*
Objects
\end_layout

\begin_layout Standard
Objects have states and methods.
 For example, a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Computer
\end_layout

\end_inset

 object can have 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout

Computer.Power = "ON"
\end_layout

\end_inset

 or 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Computer.Power = "OFF"
\end_layout

\end_inset

.
 It could also have methods like 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

turnOnComputer()
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

turnOffComputer()
\end_layout

\end_inset

.
 Basically, the states of an object can be altered by its methods.
 And the states of the objects are containers (or variables) with different
 values.
 These containers are called attributes.
\end_layout

\begin_layout Standard
An object is an instance of a class.
\end_layout

\begin_layout Subsection*
Classes
\end_layout

\begin_layout Standard
Classes are the blueprints for objects.
 For example, one could define in Java a class for 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Computer
\end_layout

\end_inset

 like
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout
\noindent

public class Computer {
\end_layout

\begin_layout Plain Layout

	String Power;
\end_layout

\begin_layout Plain Layout

	void turnOnComputer() {...}
\end_layout

\begin_layout Plain Layout

	void turnOffComputer() {...}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Classes can have three different types of variables - 
\end_layout

\begin_layout Itemize

\series bold
Local
\end_layout

\begin_deeper
\begin_layout Standard
Local variables are local to the methods.
 Once you leave a method, you cannot access them.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Instance
\end_layout

\begin_deeper
\begin_layout Standard
Instance variables are created when an object is created using the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

new
\end_layout

\end_inset

 keyword.
 JVM then allocates memory for all the 
\begin_inset Quotes eld
\end_inset

global
\begin_inset Quotes erd
\end_inset

 variables inside the class, and these variables are called instance variables.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Class
\end_layout

\begin_deeper
\begin_layout Standard
Class variables are declared within a class using 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

static
\end_layout

\end_inset

 keyword.
 They can be accessed without creating an object of the class.
 For example if instead of 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

String Power
\end_layout

\end_inset

 we had 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

static String Power
\end_layout

\end_inset

, then 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Power
\end_layout

\end_inset

 could be accessed as 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Computer.Power
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Section
Characteristics of OOP
\end_layout

\begin_layout Subsection*
Abstraction
\end_layout

\begin_layout Standard
Visualizing everything as objects give us the benefit of not worrying how
 those objects work.
 For example, a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Computer
\end_layout

\end_inset

 can be an object that opens up, plays movies, plays music, runs games but
 we do not care how and instead just focus on its use.
 So, we use it to write a document or to browse the internet without worrying
 about the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

RAM
\end_layout

\end_inset

 object, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

HardDisk
\end_layout

\end_inset

 object and other complex objects and mechanism that make it up.
 That is the essence of OOP.
\end_layout

\begin_layout Subsection*
Three OOP Principles
\end_layout

\begin_layout Itemize
Encapsulation
\end_layout

\begin_layout Itemize
Inheritance
\end_layout

\begin_layout Itemize
Polymorphism
\end_layout

\begin_layout Standard
Let us describe these in detail.
\end_layout

\begin_layout Subsection*
Encapsulation
\end_layout

\begin_layout Standard
Encapsulation is a mechanism that binds code and data, and keeps it safe
 from outside misuse and interference.
 It allows the user to affect the object in certain defined ways, thus preventin
g misuse and bad functioning.
 For example, the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Computer
\end_layout

\end_inset

 object may be accessed by 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

playMovie()
\end_layout

\end_inset

 or 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

runGame()
\end_layout

\end_inset

, but we cannot access the movie pixels that are stored inside the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Computer
\end_layout

\end_inset

 or access the auditory details of the game.
 We can just play the game or the movie.
 It is the only way we can access the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Computer
\end_layout

\end_inset

 (here).
 Encapsulation hides the complexity of an object and its methods.
\end_layout

\begin_layout Subsection*
Inheritance
\end_layout

\begin_layout Standard
Inheritance is the mechanism by which an object inherits the properties
 of another.
 For example, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Laptop
\end_layout

\end_inset

 or 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

PC
\end_layout

\end_inset

 could be objects that inherit from 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Computer
\end_layout

\end_inset

.
 An object has access to all non overridden attributes of all its ancestors.
 Objects that inherit are called children with respect to the objects they
 inherit from, called parents.
\end_layout

\begin_layout Subsection*
Polymorphism
\end_layout

\begin_layout Standard
Polymorphism is a feature that allows for an interface to be used for a
 general set of purposes.
 For example, we could need a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Queue
\end_layout

\end_inset

 object, but at different times they might be working with different types
 of values.
 Then we can define an interface 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Queue
\end_layout

\end_inset

 which should be implemented by all objects that serve that idea.
 The basic motive of polymorphism is 
\begin_inset Quotes eld
\end_inset

one interface, multiple methods
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
Difference between OOP and Procedure Oriented Programming
\end_layout

\begin_layout Standard
A program can be constructed in two ways.
 The first way is the 
\series bold
procedure oriented
\series default
 way.
 Here programs are written down as a sequence of steps.
 It can be thought of as 
\begin_inset Quotes eld
\end_inset

code acting on data
\begin_inset Quotes erd
\end_inset

.
 Procedural programming languages include C, BASIC etc.
 The problem arises when the code becomes large.
 It is then, difficult to manage.
\end_layout

\begin_layout Standard
The second way follows the idea that 
\begin_inset Quotes eld
\end_inset

everything is an object
\begin_inset Quotes erd
\end_inset

.
 It is called as 
\series bold
object oriented
\series default
 programming.
 Here the program is made around objects (data) and interfaces.
 So, it can be thought of as 
\begin_inset Quotes eld
\end_inset

data controlling access to code
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Section
Introduction to Java Programming
\end_layout

\begin_layout Standard
A short simple Java program can be written as
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

// Filename : demo1.java
\end_layout

\begin_layout Plain Layout
\noindent

class Example {
\end_layout

\begin_layout Plain Layout

	public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

		System.out.println("Hello World!");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
On Linux or Windows, this can be compiled (after installing JDK) by running
 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

javac demo1.java
\end_layout

\end_inset

.
 This would create a file 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Example.class
\end_layout

\end_inset

, which can be run using 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

java Example
\end_layout

\end_inset

.
 This prints 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Hello World!
\end_layout

\end_inset

 on a new line.
\end_layout

\begin_layout Section
Features of Java
\end_layout

\begin_layout Subsection*
Simplicity
\end_layout

\begin_layout Standard
Java inherits its syntax from C/C++, and it is not difficult to learn, if
 you have a background of C/C++.
 Moreover, it is designed to be easy and effective so that a newcomer also
 finds it simple.
\end_layout

\begin_layout Subsection*
Object Oriented
\end_layout

\begin_layout Standard
Because Java was a new language and it started off with its own implementation,
 it didn't need to comply to any language's features.
 The object model in Java is quite simple, where as Java also contains primitive
 types, as a faster alternative.
\end_layout

\begin_layout Subsection*
Robustness
\end_layout

\begin_layout Standard
In Java, it is easy to track down bugs.
 This is partly because the reason for most of the bugs, i.e.
 manual memory allocation has been removed.
 JVM handles all the memory allocation and garbage collection.
 Even more, Java provides an object oriented exception mechanism, so the
 runtime and compile-time errors can be well traced back.
\end_layout

\begin_layout Subsection*
Multithreading
\end_layout

\begin_layout Standard
Java allows us to create segments of code that run concurrently, allowing
 us to make full use of processor potential if needed.
\end_layout

\begin_layout Subsection*
Portability
\end_layout

\begin_layout Standard
Java code is very portable.
 Any Java code will work on all platforms, assuming the JVM for that platform
 is installed on it.
 So, Java is widely used as the programming language for electronic devices,
 computers, ATMs, music players, TVs, smart homes and much more.
 The goal of Java is 
\begin_inset Quotes eld
\end_inset

write once, use anywhere
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection*
Interpreted and High Performance
\end_layout

\begin_layout Standard
Java code is compiled into Java Byte Code, which can be run using the JVM.
 Even more, an JIT (just in time compiler) allows for Java code to be compiled
 into machine code, providing high performance on native systems.
\end_layout

\begin_layout Subsection*
Distributed, Works on a Network
\end_layout

\begin_layout Standard
Java is designed for a distributed network.
 It can handle TCP/IP protocols and URL handling is pretty simple in Java.
 Java supports Remote Method Invocation (RMI), i.e.
 it allows to invoke methods across a network.
\end_layout

\begin_layout Subsection*
Dynamic
\end_layout

\begin_layout Standard
All code in Java is dynamically interlinked because Java Byte Code carries
 a little amount of runtime type information which is used to resolve access
 to objects at runtime.
 So, on a running system Java performs excellently because it allows for
 dynamic update of application code.
\end_layout

\begin_layout Section
Applications and Applets
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
see section 6.1
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection*
What are Applications?
\end_layout

\begin_layout Standard
Java applications include programs made using Java, which are either meant
 to run on consoles or as a full blown desktop application or on embedded
 systems.
\end_layout

\begin_layout Subsection*
What are Applets?
\end_layout

\begin_layout Standard
Applets are small applications that can be transferred via the Internet,
 installed automatically and run as a segment of a webpage.
 Thus, after reaching a client, it has limited access to resources, and
 therefore, there is no risk of viruses or security breaches.
\end_layout

\begin_layout Subsection*
Software Needed to run Java Applets
\end_layout

\begin_layout Standard
To run an applet, you need either
\end_layout

\begin_layout Itemize
a Java compatible web browser or,
\end_layout

\begin_layout Itemize
an Applet Viewer
\end_layout

\begin_layout Subsection*
Differences between Applets and Applications
\end_layout

\begin_layout Enumerate
An 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Applet
\end_layout

\end_inset

 class doesn't have a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

main
\end_layout

\end_inset

 method, but an application has a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

main
\end_layout

\end_inset

 method.
\end_layout

\begin_layout Enumerate
Applets are made to run with the help of a web browser or applet viewer,
 where as, applications are generally to be run on a console or as an independen
t process on a computer.
\end_layout

\begin_layout Enumerate
Applets work with limited resources on a foreign client, and applications
 have access to all the generally available resources on the system it runs.
\end_layout

\begin_layout Section
JDK
\end_layout

\begin_layout Standard
JDK stands for Java Developer's Kit.
 It is any implementation of Java Standard Edition (SE), Micro Edition (ME)
 or Enterprise Edition (EE) released by Oracle.
 OpenJDK is a JDK which is released as free software.
 The latest version is OpenJDK 8.
 However, we shall be using OpenJDK 7.
\end_layout

\begin_layout Subsection*
Features in OpenJDK 7
\end_layout

\begin_layout Standard
OpenJDK 7 includes improvements in the Java runtime system, with library
 and language additions.
 The language features were developed under the name 
\emph on
Project Coin
\emph default
.
 The new language features are
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

switch
\end_layout

\end_inset

 can be controlled by 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

String
\end_layout

\end_inset

 cases.
\end_layout

\begin_layout Itemize
Binary 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

int
\end_layout

\end_inset

 is now allowed.
\end_layout

\begin_layout Itemize
Numeric literals can have underscores.
\end_layout

\begin_layout Itemize
New 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

try
\end_layout

\end_inset

 statement called try-with-resources has been introduced.
\end_layout

\begin_layout Itemize
Better 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Exception
\end_layout

\end_inset

 handling through multi-
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

catch
\end_layout

\end_inset

 statements and better type checking.
\end_layout

\begin_layout Standard
Additions to the Java API are
\end_layout

\begin_layout Itemize
NIO (or New I/O)
\end_layout

\begin_layout Itemize
Fork/Join Framework for parallel programming
\end_layout

\begin_layout Standard
Noticeably, the Fork/Join Framework had made parallel programming easy by
 simplifying the creation and using of threads, and making multiple processor
 use automatic.
\end_layout

\begin_layout Section
Source File Structure
\begin_inset Foot
status open

\begin_layout Plain Layout
http://etutorials.org/Misc/programmers+guide+java+certification/Chapter+2.+Languag
e+Fundamentals/2.5+Java+Source+File+Structure/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In general, any Java Source file must contain the following in order -
\end_layout

\begin_layout Itemize
optionally, a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

package
\end_layout

\end_inset

 declaration
\end_layout

\begin_layout Itemize
zero or more 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

import
\end_layout

\end_inset

 statements
\end_layout

\begin_layout Itemize
classes and interfaces, in the order of their hierarchy, where classes include
 methods and variable type declarations.
\end_layout

\begin_layout Chapter
Java Language Fundamentals
\end_layout

\begin_layout Section
Building Blocks of Java
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.cs.fsu.edu/~myers/cgs3416/notes/basics.html
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Components of a Java Program
\end_layout

\begin_layout Itemize

\series bold
statements
\series default
, i.e.
 instructions (generally in single lines) ending in 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
blocks
\series default
, i.e.
 code fragments that are enclosed in curly braces 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

{...}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
classes
\series default
 and respective 
\series bold
methods
\series default
, of which the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

main(String[] args)
\end_layout

\end_inset

 is the must-implement method for the class that runs through the console.
\end_layout

\begin_layout Itemize

\series bold
interfaces
\series default
, which require any class implementing them to implement some methods
\end_layout

\begin_layout Itemize

\series bold
abstract classes
\series default
, which have some implemented methods and some not implemented methods
\end_layout

\begin_layout Subsection*
More on Statements
\end_layout

\begin_layout Standard
Statements in Java are made up of reserved words, identifiers (names of
 classes, methods etc.), literals, operators and function calls.
 Optionally, comments follow a line.
\end_layout

\begin_layout Section
Data Types
\end_layout

\begin_layout Subsection*
Primitive Data Types
\end_layout

\begin_layout Standard
While Java follows the convention that 
\begin_inset Quotes eld
\end_inset

everything is an object
\begin_inset Quotes erd
\end_inset

, there are some data types in Java called primitive data types.
 These are intended for faster computing, and these are not objects.
 These are 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

byte
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

short
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

int
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

long
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

char
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

float
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

double
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

boolean
\end_layout

\end_inset

.
 These can be put in four groups
\end_layout

\begin_layout Enumerate
Integers
\end_layout

\begin_deeper
\begin_layout Standard
They include 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

byte
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

short
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

int
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

long
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Floating point numbers
\end_layout

\begin_deeper
\begin_layout Standard
They include 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

float
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

double
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Characters
\end_layout

\begin_deeper
\begin_layout Standard
This includes 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

char
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Boolean
\end_layout

\begin_deeper
\begin_layout Standard
This includes the type 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

boolean
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Subsection*

\family typewriter
byte
\end_layout

\begin_layout Standard
Signed 
\begin_inset Formula $8$
\end_inset

 bit type, range 
\begin_inset Formula $-2^{7}$
\end_inset

 to 
\begin_inset Formula $2^{7}-1$
\end_inset

.
\end_layout

\begin_layout Subsection*

\family typewriter
short
\end_layout

\begin_layout Standard
Signed 
\begin_inset Formula $16$
\end_inset

 bit type, range 
\begin_inset Formula $-2^{15}$
\end_inset

 to 
\begin_inset Formula $2^{15}-1$
\end_inset

.
\end_layout

\begin_layout Subsection*

\family typewriter
int
\end_layout

\begin_layout Standard
Signed 
\begin_inset Formula $32$
\end_inset

 bit type, range 
\begin_inset Formula $-2^{31}$
\end_inset

 to 
\begin_inset Formula $2^{31}-1$
\end_inset

.
\end_layout

\begin_layout Subsection*

\family typewriter
long
\end_layout

\begin_layout Standard
Signed 
\begin_inset Formula $64$
\end_inset

 bit type, range 
\begin_inset Formula $-2^{63}$
\end_inset

 to 
\begin_inset Formula $2^{63}-1$
\end_inset

.
\end_layout

\begin_layout Subsection*

\family typewriter
float
\end_layout

\begin_layout Standard
Single Precision value of 
\begin_inset Formula $32$
\end_inset

 bits, approximate range 
\family typewriter
1.4e-45
\family default
 to 
\family typewriter
3.4e+38
\family default
.
\end_layout

\begin_layout Subsection*

\family typewriter
double
\end_layout

\begin_layout Standard
Double Precision value of 
\begin_inset Formula $64$
\end_inset

 bits, approximate range 
\family typewriter
4.9e-324
\family default
 to 
\family typewriter
1.8e+308
\family default
.
\end_layout

\begin_layout Subsection*

\family typewriter
char
\end_layout

\begin_layout Standard
It is the data type used to store characters.
 In Java, because Unicode is used to represent characters therefore the
 range of 
\family typewriter
char 
\family default
in Java is 
\family typewriter
0 to 65536
\family default
 (
\begin_inset Formula $16$
\end_inset

 bits).
\end_layout

\begin_layout Subsection*

\family typewriter
boolean
\end_layout

\begin_layout Standard
Holds either a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

true
\end_layout

\end_inset

 or 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

false
\end_layout

\end_inset

 value (
\begin_inset Formula $1$
\end_inset

 bit).
\end_layout

\begin_layout Section
Variable Declarations
\end_layout

\begin_layout Section
Wrapper Classes
\end_layout

\begin_layout Section
Operators and Assignment
\end_layout

\begin_layout Section
Control Structures
\end_layout

\begin_layout Section
Arrays
\end_layout

\begin_layout Section
Strings
\end_layout

\begin_layout Section

\family typewriter
StringBuffer
\family default
 Class
\end_layout

\begin_layout Chapter
Java as an OOP Language
\end_layout

\begin_layout Section
Defining Classes
\end_layout

\begin_layout Section
Modifiers
\end_layout

\begin_layout Section
Packages
\end_layout

\begin_layout Section
Interfaces
\end_layout

\begin_layout Section
Exception Handling
\end_layout

\begin_layout Section
Exception Hierarchy
\end_layout

\begin_layout Section
Constructors and Methods of 
\family typewriter
Throwable
\family default
 Class
\end_layout

\begin_layout Section
Unchecked and Checked Exceptions
\end_layout

\begin_layout Section
Handling Exceptions in Java
\end_layout

\begin_layout Section
Exceptions and Inheritance
\end_layout

\begin_layout Section
Throwing User Defined Exceptions
\end_layout

\begin_layout Section
Redirecting and Rethrowing Exceptions
\end_layout

\begin_layout Chapter
Multithreading
\end_layout

\begin_layout Section
Overview of Threading
\end_layout

\begin_layout Subsection*
What is a Thread?
\end_layout

\begin_layout Standard
Java provides built-in support for multithreading.
 Basically, a multithreaded program has two or more segments that can run
 together or concurrently and each such part is independently called a thread.
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

Thread is the smallest unit of code that can be dispatched by the scheduler
 in a program, in a multitasking environment
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection*
Types of Multitasking
\end_layout

\begin_layout Itemize
Process based multitasking allows the PC to run simultaneously mutiple processes
 or, individual programs.
\end_layout

\begin_layout Itemize
Thread based multitasking allows a program to run concurrently two or more
 segments or threads in it, each of which execute differently.
\end_layout

\begin_layout Subsection*
Benefits
\end_layout

\begin_layout Standard
Due to multithreading, we can write efficient programs that make complete
 use of the processor power available.
\end_layout

\begin_layout Section
Creating Threads
\end_layout

\begin_layout Standard
There are two ways to create a thread - 
\end_layout

\begin_layout Itemize
implement the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Runnable
\end_layout

\end_inset

 interface
\end_layout

\begin_layout Itemize
extend the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Thread
\end_layout

\end_inset

 class
\end_layout

\begin_layout Subsection*
Thread Creation by implementing 
\family typewriter
Runnable 
\family default
interface
\end_layout

\begin_layout Standard
Just implement the function
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

public void run();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

run()
\end_layout

\end_inset

 returns, the thread stops.
 Basically first we need to create a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Thread
\end_layout

\end_inset


\family typewriter
 
\family default
object (say 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

myThread
\end_layout

\end_inset

) inside the class and in the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

run()
\end_layout

\end_inset

 function, we just call the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

start()
\end_layout

\end_inset

 method of that thread.
 A simple way to create thread is
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

new Thread(Runnable threadObj, String threadName);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An example is
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class ThreadClass implements Runnable {
\end_layout

\begin_layout Plain Layout

	Thread t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ThreadClass() {
\end_layout

\begin_layout Plain Layout

		t = new Thread(this, "Example Thread");
\end_layout

\begin_layout Plain Layout

		t.start();
\end_layout

\begin_layout Plain Layout

		// starts the thread by calling run()
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void run() {
\end_layout

\begin_layout Plain Layout

		// might throw an InterruptedException
\end_layout

\begin_layout Plain Layout

		try {
\end_layout

\begin_layout Plain Layout

			for (int i = 5; i > 0; ++i) {
\end_layout

\begin_layout Plain Layout

				System.out.println("ThreadClass says : "+i);
\end_layout

\begin_layout Plain Layout

				Thread.sleep(500);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

			System.out.println("ThreadClass interrupted.");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		System.out.println("ThreadClass exiting.");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Demo {
\end_layout

\begin_layout Plain Layout

	public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

		ThreadClass tc = new ThreadClass();
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		try {
\end_layout

\begin_layout Plain Layout

			for (int i = 5; i > 0; ++i) {
\end_layout

\begin_layout Plain Layout

				System.out.println("main says : "+i);
\end_layout

\begin_layout Plain Layout

				Thread.sleep(1000);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

			System.out.println("main interrupted.");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		System.out.println("main exiting.");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}		
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When we run 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Demo
\end_layout

\end_inset

 class, then first an instance of 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

ThreadClass
\end_layout

\end_inset

 is created, and then for 
\begin_inset Formula $5$
\end_inset

 times, the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

main
\end_layout

\end_inset

 thread sleeps (done via 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

sleep()
\end_layout

\end_inset

).
 Before sleeping, it outputs a number corresponding to the time the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

main
\end_layout

\end_inset

 thread is run.
 But when it sleeps, the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

ThreadClass
\end_layout

\end_inset

 instance 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

tc
\end_layout

\end_inset

 runs in parallel, and it also pauses, according to its routine.
 So we get a mix of outputs from both 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

main
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

tc
\end_layout

\end_inset

.
 The sleep command's syntax is
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

static void sleep(long milliseconds) throws InterruptedException
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

static void sleep(long milliseconds, int nanoseconds) throws InterruptedExceptio
n
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Thread Creation by extending 
\family typewriter
Thread
\end_layout

\begin_layout Standard
Here we extend the 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

Thread
\end_layout

\end_inset

 object and override its 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

run()
\end_layout

\end_inset

 function.
 Just like the previous way, it should also call 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent
\align center

start()
\end_layout

\end_inset

 to begin execution.
 An example is
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class ThreadClass2 extends Thread {
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	ThreadClass2() {
\end_layout

\begin_layout Plain Layout

		super("Example Thread");
\end_layout

\begin_layout Plain Layout

		t.start();
\end_layout

\begin_layout Plain Layout

		// starts the thread by calling run()
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void run() {
\end_layout

\begin_layout Plain Layout

		// might throw an InterruptedException
\end_layout

\begin_layout Plain Layout

		try {
\end_layout

\begin_layout Plain Layout

			for (int i = 5; i > 0; ++i) {
\end_layout

\begin_layout Plain Layout

				System.out.println("ThreadClass says : "+i);
\end_layout

\begin_layout Plain Layout

				Thread.sleep(500);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

			System.out.println("ThreadClass interrupted.");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		System.out.println("ThreadClass exiting.");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Demo2 {
\end_layout

\begin_layout Plain Layout

	public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

		ThreadClass2 tc = new ThreadClass2();
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		try {
\end_layout

\begin_layout Plain Layout

			for (int i = 5; i > 0; ++i) {
\end_layout

\begin_layout Plain Layout

				System.out.println("main says : "+i);
\end_layout

\begin_layout Plain Layout

				Thread.sleep(1000);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		} catch (InterruptedException e) {
\end_layout

\begin_layout Plain Layout

			System.out.println("main interrupted.");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		System.out.println("main exiting.");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}		
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This also pretty much works in the same way as the previous, where we implemente
d 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Runnable
\end_layout

\end_inset

.
 This time we need to compile and run 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Demo2
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Thread Life Cycle
\end_layout

\begin_layout Section
Thread Priorities and Thread Scheduling
\end_layout

\begin_layout Section
Thread Synchronization
\end_layout

\begin_layout Section
Daemon Threads
\end_layout

\begin_layout Section
Thread Groups
\end_layout

\begin_layout Section
Communication of Threads
\end_layout

\begin_layout Chapter
Files and I/O Streams
\end_layout

\begin_layout Section
Java I/O
\end_layout

\begin_layout Section
File Streams
\end_layout

\begin_layout Section

\family typewriter
FileInputStream
\family default
 and 
\family typewriter
FileOutputStream
\end_layout

\begin_layout Section
Filter Streams
\end_layout

\begin_layout Section
Random Access Files
\end_layout

\begin_layout Section
Serialization
\end_layout

\begin_layout Chapter
Applets
\end_layout

\begin_layout Section
Java Applications versus Java Applets
\end_layout

\begin_layout Subsection*
What are Applets?
\end_layout

\begin_layout Standard
Applets are small applications that can be transferred via the Internet,
 installed automatically and run as a segment of a webpage.
 Thus, after reaching a client, it has limited access to resources, and
 therefore, there is no risk of viruses or security breaches.
\end_layout

\begin_layout Subsection*
A Simple Applet
\end_layout

\begin_layout Standard
A simple applet can be created as follows.
 Just import 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

java.awt.*
\end_layout

\end_inset

 (AWT stands for Abstract Window Toolkit).
 Applets interact with the user using AWT, and not the traditional I/O classes.
 Basic functionality for applets can be found out in 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

java.applet.*
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout
\noindent

import java.awt.*;
\end_layout

\begin_layout Plain Layout

import java.applet.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class ASimpleApplet extends Applet {
\end_layout

\begin_layout Plain Layout

	public void paint(Graphics g) {
\end_layout

\begin_layout Plain Layout

		g.drawString("A very basic applet", 20, 20);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To run this applet, you need either
\end_layout

\begin_layout Itemize
a Java compatible web browser or,
\end_layout

\begin_layout Itemize
an Applet Viewer
\end_layout

\begin_layout Subsection*
Differences between Applets and Applications
\end_layout

\begin_layout Enumerate
An 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Applet
\end_layout

\end_inset

 class doesn't have a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

main
\end_layout

\end_inset

 method, but an application has a 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

main
\end_layout

\end_inset

 method.
\end_layout

\begin_layout Enumerate
Applets are made to run with the help of a web browser or applet viewer,
 where as, applications are generally to be run on a console or as an independen
t process on a computer.
\end_layout

\begin_layout Enumerate
Applets work with limited resources on a foreign client, and applications
 have access to all the generally available resources on the system it runs.
\end_layout

\begin_layout Section
Applet Life Cycle
\end_layout

\begin_layout Standard
There are four methods in an 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

Applet
\end_layout

\end_inset

 class which define its life cycle.
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

init()
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This method is called after the 
\family typewriter
<applet> 
\family default
tag has been called in the document.
 It is used for initialization purposes.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

start()
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This method is called by the browser or applet viewer after 
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

init()
\end_layout

\end_inset

 has been called, or whenever the user revisits the applet.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout

stop()
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
It is called whenever the user leaves the applet, i.e.
 when another page is visited in the browser or when the applet viewer is
 removed from view.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,keywordstyle={\color{blue}},language=Java,tabsize=4"
inline true
status open

\begin_layout Plain Layout
\noindent

destroy()
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
It is called if the browser or applet viewer shuts down normally.
 It is essential that all the resources used by the applet are restored
 before the applet is destroyed.
\end_layout

\end_deeper
\begin_layout Section
Working with Applets
\end_layout

\begin_layout Section
The HTML Applet Tag
\end_layout

\begin_layout Section

\family typewriter
java.Applet
\family default
 Package
\end_layout

\begin_layout Chapter
AWT
\end_layout

\begin_layout Section
Basic Classes in AWT
\end_layout

\begin_layout Section
Drawing with 
\family typewriter
Graphics
\family default
 Class
\end_layout

\begin_layout Section
Class Hierarchy of AWT
\end_layout

\begin_layout Section
Event Handling
\end_layout

\begin_layout Section
Adapter Classes
\end_layout

\begin_layout Section
AWT Controls
\end_layout

\begin_layout Section
Layout Managers
\end_layout

\begin_layout Section

\family typewriter
Swing
\end_layout

\begin_layout Section
Packages in 
\family typewriter
Swing
\end_layout

\begin_layout Section
Hierarchy of 
\family typewriter
Swing 
\family default
Classes
\end_layout

\begin_layout Section
Advanced Layout Managers
\end_layout

\begin_layout Section
Additional Swing Components
\end_layout

\end_body
\end_document
